(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[7],{

/***/ "./resources/js/mixins/FormMixin.js":
/*!******************************************!*\
  !*** ./resources/js/mixins/FormMixin.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var form_backend_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! form-backend-validation */ \"./node_modules/form-backend-validation/dist/index.js\");\n/* harmony import */ var form_backend_validation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(form_backend_validation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/pick */ \"./node_modules/lodash/pick.js\");\n/* harmony import */ var lodash_pick__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_pick__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/get */ \"./node_modules/lodash/get.js\");\n/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isEqual */ \"./node_modules/lodash/isEqual.js\");\n/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_3__);\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'nzFieldObservationForm',\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    method: {\n      type: String,\n      \"default\": 'POST'\n    },\n    redirectUrl: String,\n    cancelUrl: String,\n    submitMore: Boolean,\n    shouldConfirmSubmit: Boolean,\n    confirmSubmitMessage: {\n      type: String,\n      \"default\": function _default() {\n        return this.trans('You are about to submit');\n      }\n    },\n    shouldAskReason: Boolean,\n    shouldConfirmCancel: Boolean,\n    submitOnlyDirty: Boolean,\n    submitOnlyDirtyMessage: {\n      type: String,\n      \"default\": function _default() {\n        return this.trans('There are no changes, the data will not be saved.');\n      }\n    }\n  },\n  data: function data() {\n    return {\n      form: this.newForm(),\n      keepAfterSubmit: [],\n      submittingWithRedirect: false,\n      submittingWithoutRedirect: false,\n      confirmingSubmit: false,\n      confirmingCancel: false,\n      locale: window.App.locale\n    };\n  },\n  created: function created() {\n    document.addEventListener('keyup', this.registerKeyListener);\n  },\n  beforeDestroy: function beforeDestroy() {\n    document.removeEventListener('keyup', this.registerKeyListener);\n  },\n  methods: {\n    /**\r\n     * Create new form instance.\r\n     *\r\n     * @param  {Object} data default form data\r\n     * @return {Form}\r\n     */\n    newForm: function newForm() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new form_backend_validation__WEBPACK_IMPORTED_MODULE_0___default.a(data, {\n        resetOnSuccess: false\n      });\n    },\n\n    /**\r\n     * Keyboard shortcuts.\r\n     *\r\n     * @param {Event} e\r\n     */\n    registerKeyListener: function registerKeyListener(e) {\n      var enter = 13 === (e.which || e.keyCode);\n\n      if (e.ctrlKey && e.shiftKey && enter) {\n        this.submitMore && this.submitWithoutRedirect();\n      } else if (e.ctrlKey && enter) {\n        this.submitWithRedirect();\n      }\n    },\n\n    /**\r\n     * Confirm submit.\r\n     *\r\n     * @param {Function} onConfirm\r\n     */\n    confirmSubmit: function confirmSubmit(onConfirm) {\n      var _this = this;\n\n      if (this.confirmingSubmit) return;\n      this.confirmingSubmit = true;\n      var options = {\n        message: this.confirmSubmitMessage,\n        confirmText: this.trans('buttons.save'),\n        cancelText: this.trans('buttons.cancel'),\n        onConfirm: onConfirm,\n        onCancel: function onCancel() {\n          _this.confirmingSubmit = false;\n        }\n      };\n\n      if (!this.shouldAskReason) {\n        return this.$buefy.dialog.confirm(options);\n      }\n\n      return this.promptForReason(options);\n    },\n\n    /**\r\n     * Prompt the user for reason of change.\r\n     *\r\n     * @param  {Object} options\r\n     * @return {Vue}\r\n     */\n    promptForReason: function promptForReason(options) {\n      var _this2 = this;\n\n      var dialog = this.$buefy.dialog.prompt(_objectSpread(_objectSpread({}, options), {}, {\n        inputAttrs: {\n          placeholder: this.trans('Reason'),\n          required: true,\n          maxlength: 255\n        }\n      })); // Custom localized validation for the prompt input.\n\n      dialog.$nextTick(function () {\n        dialog.$refs.input.addEventListener('invalid', function (e) {\n          e.target.setCustomValidity('');\n\n          if (!e.target.validity.valid) {\n            e.target.setCustomValidity(_this2.trans('This field is required and can contain max 255 chars.'));\n          }\n        });\n        dialog.$refs.input.addEventListener('input', function (e) {\n          dialog.validationMessage = null;\n        });\n      });\n      return dialog;\n    },\n\n    /**\r\n     * Notify the user there are no changes.\r\n     */\n    notifyNoChanges: function notifyNoChanges() {\n      this.$buefy.toast.open({\n        message: this.submitOnlyDirtyMessage,\n        type: 'is-info'\n      });\n    },\n\n    /**\r\n     * Notify the user there are no changes and redirect.\r\n     */\n    notifyNoChangesAndRedirect: function notifyNoChangesAndRedirect() {\n      var _this3 = this;\n\n      this.notifyNoChanges();\n      setTimeout(function () {\n        if (_this3.redirectUrl) {\n          window.location.href = _this3.redirectUrl;\n        }\n      }, 500);\n    },\n\n    /**\r\n     * Submit the form with redirect.\r\n     */\n    submitWithRedirect: function submitWithRedirect() {\n      if (this.form.processing) return;\n      if (this.submitOnlyDirty && !this.isDirty()) return this.notifyNoChangesAndRedirect();\n      if (this.shouldConfirmSubmit) return this.confirmSubmit(this.performSubmitWithRedirect);\n      this.performSubmitWithRedirect();\n    },\n\n    /**\r\n     * Submit the form with redirect.\r\n     */\n    performSubmitWithRedirect: function performSubmitWithRedirect() {\n      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.submittingWithRedirect = true;\n      this.confirmingSubmit = false;\n\n      if (this.shouldAskReason) {\n        this.form.reason = reason;\n      }\n\n      this.form[this.method.toLowerCase()](this.action).then(this.onSuccessfulSubmitWithRedirect)[\"catch\"](this.onFailedSubmit);\n    },\n\n    /**\r\n     * Handle successful form submit with redirect.\r\n     */\n    onSuccessfulSubmitWithRedirect: function onSuccessfulSubmitWithRedirect() {\n      var _this4 = this;\n\n      this.form.processing = true;\n      this.$buefy.toast.open({\n        message: this.trans('Saved successfully'),\n        type: 'is-success'\n      }); // We want to wait a bit before we send the user to redirect route\n      // so we can show the message that the action was successful.\n\n      setTimeout(function () {\n        _this4.form.processing = false;\n        _this4.submittingWithRedirect = false;\n\n        _this4.hookAfterSubmitWithRedirect();\n\n        if (_this4.redirectUrl) {\n          window.location.href = _this4.redirectUrl;\n        }\n      }, 500);\n    },\n\n    /**\r\n     * Perform after submit with redirect is successful.\r\n     */\n    hookAfterSubmitWithRedirect: function hookAfterSubmitWithRedirect() {},\n\n    /**\r\n     * Submit the form and stay to add more.\r\n     */\n    submitWithoutRedirect: function submitWithoutRedirect() {\n      if (this.form.processing) return;\n      if (this.submitOnlyDirty && !this.isDirty()) return this.notifyNoChanges();\n      if (this.shouldConfirmSubmit) return this.confirmSubmit(this.performSubmitWithoutRedirect);\n      this.performSubmitWithoutRedirect();\n    },\n\n    /**\r\n     * Submit the form and stay to add more.\r\n     */\n    performSubmitWithoutRedirect: function performSubmitWithoutRedirect() {\n      var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.submittingWithoutRedirect = true;\n      this.confirmingSubmit = false;\n\n      if (this.shouldAskReason) {\n        this.form.reason = reason;\n      }\n\n      this.form[this.method.toLowerCase()](this.action).then(this.onSuccessfulSubmitWithoutRedirect)[\"catch\"](this.onFailedSubmit);\n    },\n\n    /**\r\n     * Handle successful form submit with no redirect.\r\n     */\n    onSuccessfulSubmitWithoutRedirect: function onSuccessfulSubmitWithoutRedirect() {\n      this.submittingWithoutRedirect = false;\n      this.$buefy.toast.open({\n        message: this.trans('Saved successfully'),\n        type: 'is-success'\n      }); // Reset the form but remember some data.\n\n      var keep = lodash_pick__WEBPACK_IMPORTED_MODULE_1___default()(this.form.data(), this.keepAfterSubmit);\n\n      this.form.reset();\n      this.form.populate(keep);\n      this.hookAfterSubmitWithoutRedirect();\n    },\n\n    /**\r\n     * Perform after submit without redirect is successful.\r\n     */\n    hookAfterSubmitWithoutRedirect: function hookAfterSubmitWithoutRedirect() {},\n\n    /**\r\n     * Handle failed form submit.\r\n     *\r\n     * @param {Error} error\r\n     */\n    onFailedSubmit: function onFailedSubmit(error) {\n      this.submittingWithRedirect = false;\n      this.submittingWithoutRedirect = false;\n      this.$buefy.toast.open({\n        duration: 2500,\n        message: lodash_get__WEBPACK_IMPORTED_MODULE_2___default()(error, 'response.data.message', error.message),\n        type: 'is-danger'\n      });\n    },\n\n    /**\r\n     * Check if form is changed.\r\n     *\r\n     * @return {Boolean}\r\n     */\n    isDirty: function isDirty() {\n      return !lodash_isEqual__WEBPACK_IMPORTED_MODULE_3___default()(this.form.data(), this.form.initial);\n    },\n\n    /**\r\n     * Confirmation dialog for canceling.\r\n     */\n    confirmCancel: function confirmCancel() {\n      var _this5 = this;\n\n      if (this.confirmingCancel) return;\n      this.confirmingCancel = true;\n      this.$buefy.dialog.confirm({\n        message: this.trans('If you leave this page changes will not be saved.'),\n        onConfirm: function onConfirm() {\n          _this5.confirmingCancel = false;\n          window.location.href = _this5.cancelUrl;\n        },\n        onCancel: function onCancel() {\n          _this5.confirmingCancel = false;\n        },\n        cancelText: this.trans('buttons.stay_on_page'),\n        confirmText: this.trans('buttons.leave_page')\n      });\n    },\n\n    /**\r\n     * Handle cancel button/link.\r\n     *\r\n     * @param {Event} event\r\n     */\n    onCancel: function onCancel(event) {\n      if (this.shouldConfirmCancel && this.isDirty()) {\n        event.preventDefault();\n        this.confirmCancel();\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/mixins/FormMixin.js\n");

/***/ })

}]);